# Tomcat
server:
  tomcat:
    uri-encoding: UTF-8
    threads:
      max: 1000
      min-spare: 30
  port: 8080
  servlet:
    context-path: /
    session:
      cookie:
        http-only: true
oh:
  xss:
    enabled: true
    exclude-urls:
      - /oh-generator/**
  security:
    access-token-expire: 43200      # 过期时间，12小时过期
    refresh-token-expire: 1209600   # 14天过期
    auth-count: 5                   # 多少次鉴权失败锁定，0表示不开启
    lock-time: 3600                 # 账号锁定时间(秒)
    ignore-urls:                    # 忽略鉴权的url
      - /demo
      - /test
  open-api:
    type: 2 # 1直接保存 2使用MQ异步保存
  project:
    name: Oh Boot              # 名称
    appName: oh-boot           # 应用名称
    version: 1.0.0-SNAPSHOT    # 版本
    description: 欢迎使用OH-Boot，让开发更简单！ - 王小费【whx5710@qq.com】

storage:
  enabled: true
  config:
    type: local  # 存储类型：local、aliyun、tencent、qiniu、huawei、minio
    domain: http://localhost:8080
  local:
    path: /home/whx/图片/upload

mybatis-plus:
  mapper-locations: classpath*:/mapper/**/*.xml
  typeAliasesPackage: com.iris.*.entity # 实体扫描，多个package用逗号或者分号分隔
  global-config:
    # 数据库相关配置
    db-config:
      id-type: AUTO  # ID自增
      # logic-delete-field: db_status # 全局逻辑删除的实体字段名(since 3.3.0)
      logic-delete-value: 0      # 逻辑已删除值
      logic-not-delete-value: 1  # 逻辑未删除值
    banner: false
  # 原生配置
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    call-setters-on-nulls: true
    jdbc-type-for-null: 'null'
  configuration-properties:
    prefix:
    blobType: BLOB
    boolValue: TRUE

#easy trans 数据翻译组件
easy-trans:
  is-enable-redis: false      # 启用redis缓存 如果不用redis请设置为false
  is-enable-global: true      # 启用全局翻译(拦截所有responseBody进行自动翻译)，如果对于性能要求很高可关闭此配置
  is-enable-tile: true        # 启用平铺模式
  multiple-data-sources: true # 启用多数据源
  # db-type: mysql            # 反向翻译数据库类型 mysql


spring:
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss  # 设置 java.util.Date, Calendar 序列化、反序列化的格式
    locale: zh                        # 当地时区
    time-zone: GMT+8                  # 设置全局时区
    # 设置对象或被@JsonInclude注解的属性的序列化方式。NON_NULL 表示不为空的属性才会序列化,具体属性可看JsonInclude.Include
    # default-property-inclusion: NON_NULL
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false   # 禁止将 java.util.Date, Calendar 序列化为数字(时间戳)
      FAIL_ON_EMPTY_BEANS: false         # 序列化时，对象为 null，是否抛异常
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false  # 反序列化时，json 中包含 pojo 不存在属性时，是否抛异常
  servlet:
    multipart:
      max-file-size: 1024MB
      max-request-size: 1024MB
  main:
    banner-mode: "OFF"  # 关闭 banner CONSOLE、LOG、OFF
  data:
    redis:
      database: 0
      host: 127.0.0.1
      port: 6379
      #password:
      timeout: 10s  # 连接超时时间
      # 是否开启 SSL
      ssl:
        enabled: false
  datasource:
    hikari:
      connection-timeout: 30000     # 等待连接池分配链接的最大时长（毫秒），超过这个时长还没有可用的连接则发生 SQLException，默认：30 秒
      minimum-idle: 2               # 最小空闲连接数
      maximum-pool-size: 20         # 最大连接数
      auto-commit: true             # 自动提交
      idle-timeout: 600000          # 连接超时的最大时长（毫秒），超时则被释放（retired），默认：10 分钟
      max-lifetime: 1800000         # 连接的生命时长（毫秒），超时而且没被使用则被释放（retired），默认： 30 分钟
      connection-test-query: SELECT 1
      pool-name: OhHikariCP
      prepStmtCacheSize: 300        # 【mysql】在每个连接中缓存的语句的数量。默认值为保守值25。建议将其设置为250-500之间
      prepStmtCacheSqlLimit: 500    # 缓存的已准备SQL语句的最大长度，默认值是256
      cachePrepStmts: true          # 缓存开关，如果这里设置为false，上面两个参数都不生效
      useServerPrepStmts: true      # 较新版本的 MySQL 支持服务器端准备好的语句
    dynamic:
      #  dynamic主从设置
      primary: master #设置默认的数据源或者数据源组,默认值即为master
      strict: false  #设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候回抛出异常,不启动会使用默认数据源.
      datasource:
        sysDb:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://127.0.0.1:3306/oh-boot?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true
          username: root
          password: 123456
          type: com.zaxxer.hikari.HikariDataSource
          init:
            schema: classpath*:db/sys-schema.sql  # 自动运行的建表脚本
            data: classpath*:db/sys-data.sql      # 自动运行的数据脚本
            continue-on-error: true                   # 错误是否继续 默认 true
            separator: ;                              # 分隔符 默认 ;
        master:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://127.0.0.1:3306/oh-business?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&nullCatalogMeansCurrent=true
          username: root
          password: 123456
          type: com.zaxxer.hikari.HikariDataSource
          init:
            schema: classpath*:db/project-schema.sql  # 自动运行的建表脚本
            data: classpath*:db/project-data.sql      # 自动运行的数据脚本
            continue-on-error: true                     # 错误是否继续 默认 true
            separator: ;                                # 分隔符 默认 ;
  kafka:
    bootstrap-servers: 127.0.0.1:9092
    client-id: dc-device-flow-analyze
    listener:
      ack-mode: MANUAL_IMMEDIATE
      concurrency: 3  # 多任务
      # type: BATCH #开启批量监听
    consumer:
      group-id: oh-group
      max-poll-records: 10
      auto-offset-reset: earliest  # Kafka中没有初始偏移或如果当前偏移在服务器上不再存在时,默认区最新 ，有三个选项 【latest, earliest, none】
      enable-auto-commit: false    # 是否开启自动提交
      auto-commit-interval: 1000   # 自动提交的时间间隔
      key-serializer: org.apache.kafka.common.serialization.StringDeserializer
      value-serializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      # 0：producer 不等待 broker 的 ack
      # 1：producer 等待 broker 的 ack，partition 的 leader 落盘成功后返回 ack，如果在 follower 同步成功之前 leader 故障，那么将会丢失数据
      # -1（all）：producer 等待 broker 的 ack，partition 的 leader 和 follower （ISRL里的follower，不是全部的follower）全部落盘成功后才 返回 ack
      acks: 1
      batch-size: 4096
      buffer-memory: 40960000
      client-id: dc-device-flow-analyze-producer
      compression-type: zstd # 压缩算法
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      retries: 3 # 重复次数
      properties:
        spring.json.add.type.headers: false
        max.request.size: 126951500
# 接口文档
knife4j:
  enable: true  # 开启增强配置
  # 是否生产环境，生产环境屏蔽，开发环境需显示接口文档
  # production: true
  setting:
    custom-code: 500
    enable-footer-custom: false
# 工作流配置 https://docs.camunda.org/manual/latest/user-guide/spring-boot-integration/configuration/
camunda.bpm:
  #enabled: false # Switch to disable the Camunda auto-configuration. Use to exclude Camunda in integration tests.
  process-engine-name: OH工作流   # Name of the process engine
  auto-deployment-enabled: false # 自动部署 resources 下的 bpmn文件
  database:
    type: mysql
    schema-update: true
  generic-properties.properties:
    javaSerializationFormatEnabled: true
    historyTimeToLive: P365D
  admin-user:
    id: admin
    password: 123456
  # 定时任务
  job-execution:
    enabled: false # 如果设置为 false，则根本不会创建任何 JobExecutor bean。可以用于测试目的
  run:
    # https://docs.camunda.org/manual/latest/user-guide/camunda-bpm-run/#cross-origin-resource-sharing
    cors:
      enabled: true
      allowed-origins: "*"
  filter:
    create: 所有任务

# 日志信息
logging:
  # 字符集设置
  charset:
    file: UTF-8
    console: UTF-8
  level:  # 默认的全局日志级别 TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF
    com.iris: DEBUG
    root: DEBUG
    # org.springframework.web: debug # web相关的日志级别
  pattern:
    # 在控制台输出的日志格式
    # 无颜色 '%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{50} - %msg%n'
    # 有颜色 '%red(%d{yyyy-MM-dd HH:mm:ss.SSS}) %highlight(%-5level) %green([%thread]) %boldMagenta(%logger{50}) - %msg%n'
    console: '%red(%d{yyyy-MM-dd HH:mm:ss.SSS}) %highlight(%-5level) %green([%thread]) %boldMagenta(%logger{50}) - %msg%n'
  file:
    # 日志存放的路径 path和 file这2个属性，只需要配置其中之一即可，如果同时配置，则使用logging.file属性
    # path: logs
    name: logs/${spring.application.name}.out.log
  logback:
    rollingpolicy:
      clean-history-on-start: true                        # 是否在启动时清除存档日志文件
      file-name-pattern: ${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz # 滚动日志文件名的模式
      max-history: 10                                     # 要保留的存档日志文件的最大数量
      max-file-size: 100MB                                # 最大文件大小，默认10MB

